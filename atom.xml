<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>myblog</title>
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2017-05-04T14:08:39.780Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>wangdj</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>webpack 配置react脚手架 配置文件</title>
    <link href="http://yoursite.com/2017/05/04/webpack-%E9%85%8D%E7%BD%AEreact%E8%84%9A%E6%89%8B%E6%9E%B6-%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6/"/>
    <id>http://yoursite.com/2017/05/04/webpack-配置react脚手架-配置文件/</id>
    <published>2017-05-04T13:46:12.000Z</published>
    <updated>2017-05-04T14:08:39.780Z</updated>
    
    <content type="html"><![CDATA[<p>出于省事的目的，不用自己去记。 搬运来，算是记个笔记<br>英文地址，猛击<a href="http://www.pro-react.com/materials/appendixA/" target="_blank" rel="external">http://www.pro-react.com/materials/appendixA/</a><br>中文地址，猛击<a href="http://www.jianshu.com/p/42e11515c10f" target="_blank" rel="external">http://www.jianshu.com/p/42e11515c10f</a></p>
<p>PS.在配置loaders的loader关键字时加上后面的“-loader”后缀。新版做的规定，网上之前的文章并没有提及，算是个坑。webpack配置是做简单的配置，根据需要可以自己修改。<br>文件夹基本结构</p>
<p>安装 webpack</p>
<p>确保 系统中已安装node.js 通过npm安装 webpack，新建文件（例如 reactapp）cd命令进入该文件夹</p>
<p>//全局安装<br>npm install -g webpack<br>//安装到你的项目目录<br>npm install –save-dev webpack<br>初始化 生成package.json文件<br>终端中使用npm init命令可以自动创建</p>
<p>npm init<br>输入这个命令后，终端会提示填写名称，描述，作者等信息，回车默认即可。<br>package.json文件最终版本如下</p>
<p>`var path = require(‘path’);<br>var webpack = require(‘webpack’);  //加载webpack依赖包<br>var HtmlWebpackPlugin = require(‘html-webpack-plugin’);<br>var ExtractTextPlugin = require(‘extract-text-webpack-plugin’);<br>module.exports = {<br>    devtool: ‘eval-source-map’,<br>      entry:  <strong>dirname + “/app/main.js”,<br>     output: {<br>          path: </strong>dirname + “/build”,<br>       //输出文件<br>     filename: “[name]-[hash].js”<br>},<br>  devServer: {<br>   contentBase: “./build”,//本地服务器所加载的页面所在的目录<br>        colors: true,//终端中输出结果为彩色<br>    historyApiFallback: true,//不跳转<br>        inline: true,//实时刷新<br>           hot: true<br>} ,<br>   module: {<br>     loaders: [<br>        {<br>            test: /.js?$/,<br>            exclude: /node_modules/,<br>            loader: ‘babel-loader’,<br>         },<br>        { test: /.json$/,loader: “json-loader” },<br>        { test: /.css$/, loader: ‘style-loader!css-loader’ },  //分离js 和css文件 ExtractTextPlugin.extract({ fallback: ‘style-loader’, use: ‘css-loader’ })//<br>        //打包css文件<br>        { test: /.scss$/, loader: ‘style-loader!css-loader!sass-loader’}, //分离js 和css文件 ExtractTextPlugin.extract({ fallback: ‘style-loader’, use: ‘css-loader!sass-loader’ })//<br>        //编译sass文件<br>        { test: /.(png|jpg)$/, loader: ‘url-loader?limit=8192’}<br>        //对图片进行打包<br>       ]<br>},<br>   postcss: [<br>       require(‘autoprefixer’)//调用autoprefixer插件  ],<br>   resolve: {<br>      //自动扩展文件后缀名<br>    extensions: [‘.js’, ‘.json’, ‘.scss’, ‘.css’,’.jsx’]<br>  } ,<br>   plugins: [<br>    new HtmlWebpackPlugin({<br>      template: __dirname + “/app/index.html”<br>}),<br>    new webpack.HotModuleReplacementPlugin(),<br>    new ExtractTextPlugin(“[name]-[hash].css”),<br>    new webpack.optimize.UglifyJsPlugin(),<br>    new ExtractTextPlugin(“style.css”)<br>    ]<br>};<br>.babelrc文件</p>
<p>{<br>“presets”: [“react”, “es2015”],<br>“env”: {<br>“development”: {<br>“plugins”: [[“react-transform”, {<br>   “transforms”: [{<br>     “transform”: “react-transform-hmr”,<br>       “imports”: [“react”],<br>        “locals”: [“module”]<br>   }]<br> } ] ]<br>} } }  `<br>安装babel</p>
<p>//安装<br>npm install –save-dev babel-core babel-loader babel-preset-es2015 babel-preset-react<br>插件部分</p>
<p>安装postcss-loader 和 autoprefixer（自动添加前缀的插件）</p>
<p>//安装<br>npm install –save-dev postcss-loader autoprefixer<br>安装css-loader 和 style-loader</p>
<p>//安装<br>npm install –save-dev style-loader css-loader<br>Hot Module Replacement（HMR）是webpack里很有用的一个插件，修改组件代码后，自动刷新实时预览修改后的效果<br>安装react-transform-hmr 修改babel文件</p>
<p>//安装<br>npm install –save-dev babel-plugin-react-transform react-transform-hmr<br>HtmlWebpackPlugin<br>作用是依据一个简单的模板，生成最终的Html5文件，文件中自动引用打包后的JS文件。每次编译在文件名中插入不同的哈希值</p>
<p>//安装<br>npm install –save-dev html-webpack-plugin<br>优化插件</p>
<p>OccurenceOrder 和 UglifyJS plugins 都是内置插件</p>
<p>npm install –save-dev extract-text-webpack-plugin<br>eslint babel-eslint eslint-plugin-react eslint-plugin-babel 纠错工具</p>
<p>中间件服务器脚本</p>
<p>var path = require(‘path’);<br>var express = require(‘express’);<br>var webpack = require(‘webpack’);<br>var config = require(‘./webpack.config’);<br>var app = express();<br>var compiler = webpack(config);</p>
<p>var webpackDevOptions = {<br>noInfo: true,<br>historyApiFallback: true,<br>publicPath: config.output.publicPath,<br> headers: {<br>‘Access-Control-Allow-Origin’: ‘*’<br>}<br>};</p>
<p>app.use(require(‘webpack-dev-middleware’)(compiler, webpackDevOptions));<br>app.use(require(‘webpack-hot-middleware’)(compiler));</p>
<p>app.get(‘/‘, function(req, res) {<br> res.sendFile(path.join(__dirname, ‘index.html’));<br>});</p>
<p>app.listen(8080, ‘localhost’, function(err) {<br>if (err) {<br>console.log(err);<br>return;<br>}</p>
<p>console.log(‘Listening at <a href="http://localhost:8080" target="_blank" rel="external">http://localhost:8080</a>‘);<br>});<br>使用 ESLint</p>
<p>npm install –save-dev babel-eslint eslint eslint-plugin-react<br>配置 .eslintrc文件</p>
<p>{<br>  “extends”: “eslint:recommended”, //可选”eslint-config-airbnb”<br>  “ecmaFeatures”: {<br>  “jsx”: true,<br>  “modules”: true<br>  },<br>  “env”: {<br>  “browser”: true,<br>  “node”: true,<br>  “es6”: true<br>  },<br>  “parser”: “babel-eslint”,<br>  “rules”: {<br>  “strict”: 0,<br>  “valid-jsdoc”: 2,</p>
<p>  “react/jsx-uses-react”: 2,<br>  “react/jsx-uses-vars”: 2,<br>  “react/react-in-jsx-scope”: 2<br> },<br>  “plugins”: [<br>  “react”<br>  ]<br>}</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;出于省事的目的，不用自己去记。 搬运来，算是记个笔记&lt;br&gt;英文地址，猛击&lt;a href=&quot;http://www.pro-react.com/materials/appendixA/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://www.pr
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>2017读书计划</title>
    <link href="http://yoursite.com/2017/01/28/hello-world/"/>
    <id>http://yoursite.com/2017/01/28/hello-world/</id>
    <published>2017-01-28T09:53:57.445Z</published>
    <updated>2017-01-29T12:30:20.037Z</updated>
    
    <content type="html"><![CDATA[<p>  虽说是写的是计划，可是以后发生的事情多少都有一些自己无法掌控的事情。就拿这个来说，本打算放假回家之后再来写，临时改变了想法。算是在回家之前再省掉一件事情。<br>  读书不是目的，只是达到目的的一种手段而已。获取知识抑或是闲暇时光的消遣都可以，我是前者。<br>  16年买了20几本书，在社区兑换了几本，基本集中在9月份以后，现在已看完其中一半吧。希望17年1季度再干掉一部分。.<br>  涉及前端的书较多一些，本人兴趣，so简单列一下。<br>《深入react技术栈》前端三分天下的框架之一，不论怎样还是要看看。<br>《深入浅出nodejs》这书看了一半，找个机会再仔细看完下半部分。<br>《javascript设计模式》看了几章，<br>还有双11购买的几本，塑封还没有拆开，如下<br>《汉字设计与应用》<br>《匠人精神》<br>《cinema4d完全学习手册》这本大概看了一遍，软件熟悉了一下有必要再看看，软件还是要多练手，这个暂且不表。<br>《angular2权威指南》这本尚未出版，计划中。<br>《你不知道的javascript下卷）》尚未出版。<br>《SQL必知必会》，这本没什么感觉纯粹觉得便宜凑单买的，既然买了一定要看完。<br>《中村俊辅：任意球大师的察知力》<br>《Python编程：从入门到实践》<br>《Flask Web开发：基于Python的Web应用开发实战》<br>《github实践》<br>《智取程序员面试》<br>《网络是怎样连接的》<br>《图解HTTP》这两本电子版<br>既然列出来了，一定会去看，其他的书就暂时不列举了。既然是计划就不搞得像个购物清单的样子了。<br>生活当中有意思很多，书也很多不止于技术书。<br>还有小说 ，希望有闲之余把丹布朗的几本都看下。两天时间看完了两本，应该不成问题。<br>徐浩峰的小说除了《道士下山》《一个人的武林》想看看《武士会》《刀背藏身》<br>很遗憾金庸先生的小说一部都没看过，可以搞一下。<br>喜欢推理小说日本欧美都有看过些，有相同爱好的朋友要是看到了，可以多多推荐，在此感谢， l流水账一般倘若有朋友看到此，希望不会令您觉得浪费了时光。<br>在次感谢。 2017.1.25</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;  虽说是写的是计划，可是以后发生的事情多少都有一些自己无法掌控的事情。就拿这个来说，本打算放假回家之后再来写，临时改变了想法。算是在回家之前再省掉一件事情。&lt;br&gt;  读书不是目的，只是达到目的的一种手段而已。获取知识抑或是闲暇时光的消遣都可以，我是前者。&lt;br&gt;  16
    
    </summary>
    
    
  </entry>
  
</feed>
